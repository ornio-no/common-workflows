name: Node.js Build and Deploy Development

on:
  workflow_call:
    inputs:
      image_name:
        description: "Image name"
        required: true
        type: string
      run_jobs:
        description: "Run jobs"
        required: false
        default: false
        type: boolean
    secrets:
      k8s_token:
        description: "K8S (Digital Ocean) Token"
        required: true
      k8s_cluster_id:
        description: "K8S (Digital Ocean) Cluster ID"
        required: true

env:
  NAMESPACE_ENV: dev
  NAMESPACE: ornio-dev
  IMAGE_NAME: ${{ inputs.image_name }}
  DEPLOYMENT_NAME: ${{ inputs.image_name }}
  TAG_NAME: registry.digitalocean.com/uwork-k8s/$IMAGE_NAME
  TAG_NAME_WITH_COMMIT: registry.digitalocean.com/uwork-k8s/$IMAGE_NAME:$GITHUB_SHA
  DO_TOKEN: ${{ secrets.k8s_token }}
  DO_CLUSTER_ID: ${{ secrets.k8s_cluster_id }}
  RUN_JOBS: ${{ inputs.run_jobs }}

jobs:
  build-and-deploy-dev:
    name: Build and deploy Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ env.DO_TOKEN }}
      - name: Build and push docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} -f Dockerfile.development .
          docker tag ${{ env.IMAGE_NAME }} ${{ env.TAG_NAME }}
          docker tag ${{ env.IMAGE_NAME }} ${{ env.TAG_NAME_WITH_COMMIT }}
          doctl registry login --expiry-seconds 1200
          docker push ${{ env.TAG_NAME_WITH_COMMIT }}
          docker push ${{ env.TAG_NAME }}
      - name: Deploy to K8S
        run: |
          doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.DO_CLUSTER_ID }}
          kubectl --insecure-skip-tls-verify --namespace=${{ env.NAMESPACE }} set image deployment/${{ env.DEPLOYMENT_NAME }} ${{ env.DEPLOYMENT_NAME }}=${{ env.TAG_NAME_WITH_COMMIT }}
      - name: Run jobs
        if: ${{ env.RUN_JOBS }}
        run: |
          kubectl --insecure-skip-tls-verify delete -f ./k8s/${{ env.NAMESPACE_ENV }}/jobs
          kubectl --insecure-skip-tls-verify apply -f ./k8s/${{ env.NAMESPACE_ENV }}/jobs
